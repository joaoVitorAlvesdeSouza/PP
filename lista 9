-------------------------------------------------------------------------
                                 lista 9
-------------------------------------------------------------------------

//1

#include <stdio.h>

void main()
{
  int a = 0, *pa;
  float b = 1.1, *pb;
  char c = 'a', *pc;

  pa = &a;
  pb = &b;
  pc = &c;

  printf("a = %d, b = %f, c = %c\n", a, b, c);

  *pa = 1;
  *pb = 2.2;
  *pc = 'b';

  printf("a = %d, b = %f, c = %c\n", a, b, c);
}

------------------------------------------------------------
//2

#include <stdio.h>

void main()
{
  int a = 0, b = 0;

  printf("%d\n", &a > &b ? &a : &b);
}

---------------------------------------------------------------
//3

#include <stdio.h>

void main()
{
  int a, b;

  scanf("%d %d", &a, &b);

  printf("%d\n", &a > &b ? &a : &b);
}

------------------------------------------------------------------
//4

#include <stdio.h>

void alterarValores(int *a, int *b);

void main()
{
  int a, b;

  scanf("%d %d", &a, &b);

  alterarValores(&a, &b);

  printf("%d %d\n", a, b);
}

void alterarValores(int *a, int *b) {
  int aux;

  aux = *a;
  *a = *b;
  *b = aux;
}

-------------------------------------------------------------------
//5

#include <stdio.h>

void alterarValores(int *a, int *b);

void main() {
  int a, b;

  scanf("%d %d", &a, &b);

  alterarValores(&a, &b);

  printf("%d %d\n", a, b);
}

void alterarValores(int *a, int *b) {
  if (*b > *a) {
    int aux = *a;
    *a = *b;
    *b = aux;
  }
}

--------------------------------------------------------------------
//6

#include <stdio.h>

int somarDobro(int *a, int *b);

void main()
{
  int a, b;

  scanf("%d %d", &a, &b);

  int dobro = somarDobro(&a, &b);

  printf("%d\n", dobro);
}

int somarDobro(int *a, int*b) {
  *a = 2 * *a;
  *b = 2 * *b;

  return *a + *b;
}


------------------------------------------------------------------
//7

#include <stdio.h>

void soma(int *a, int *b);

void main() {
  int a, b;

  scanf("%d %d", &a, &b);

  soma(&a, &b);

  printf("%d\n", a);
}

void soma(int *a, int *b) {
  *a += *b;
}

-------------------------------------------------------------------
//8

#include <stdio.h>

void main()
{
  float array[10];
  int i;

  for (i = 0; i < 10; i++)
    printf("%p\n", &array[i]);
}

--------------------------------------------------------------------
//9

#include <stdio.h>

void main() {
  int array[5];

  for (int i = 0; i < 5; i++) {
    int *p = array + i;
    scanf("%d", p);

    *p += *p;
  }   

  for (int i = 0; i < 5; i++) {
    int *p = array + i;
    printf("%d\n", *p);
  } 
}

------------------------------------------------------------------
//10

#include <stdio.h>

void main()
{
  int array[5];

  for (int i = 0; i < 5; i++)
  {
    int *p = array + i;
    scanf("%d", p);
  }

  for (int i = 0; i < 5; i++)
  {
    int *p = array + i;
    if (*p % 2 == 0)
    {
      printf("%p\n", p);
    }
  }
}

-------------------------------------------------------------------
//11

#include <stdio.h>

void main()
{
  int a, b, c;
  scanf("%d %d %d", &a, &b, &c);

  int *p = &a;
  int *q = &b;
  int *r = &c;

  int result = sort(p, q, r);

  if (result == 1)
  {
    printf("Os valores sao iguais\n");
  }
  else
  {
    printf("%d %d %d\n", a, b, c);
  }
}

--------------------------------------------------------------------
//12

#include <stdio.h>

int isSubstring(char *a, char *b);

void main() {
  char a[100], b[100];

  fgets(a, 100, stdin);
  fgets(b, 100, stdin);

  if (isSubstring(a, b)) {
    printf("Eh uma substring\n");
  } else printf("Nao eh uma substring\n");
}

int isSubstring(char *a, char *b) {
  int startPos = 0;

  for (int i = 0; *(a + i) != '\n' ; i++) {
    if (*(b + startPos) == '\n') {
      return 1;
    }
    
    if (*(a + i) == *(b + startPos)) {
      startPos++;
    } else {
      startPos = 0;
    }
  }

  return 0;
}

-----------------------------------------------------------
//13

#include <stdio.h>

int isSubstring(char *a, char *b);

void main() {
  char a[100], b[100];

  fgets(a, 100, stdin);
  fgets(b, 100, stdin);

  if (isSubstring(a, b)) {
    printf("Eh uma substring\n");
  } else printf("Nao eh uma substring\n");
}

int isSubstring(char *a, char *b) {
  int startPos = 0;

  for (int i = 0; *(a + i) != '\n' ; i++) {
    if (*(b + startPos) == '\n') {
      return 1;
    }
    
    if (*(a + i) == *(b + startPos)) {
      startPos++;
    } else {
      startPos = 0;
    }
  }

  return 0;
}
------------------------------------------------------------------
//14

#include <stdio.h>

void fillArray(int *array, int value, int size);

void main() {
  int array[5];

  fillArray(array, 10, 5);

  for (int i = 0; i < 5; i++) {
    printf("%d\n", array[i]);
  }
}

void fillArray(int *array, int value, int size) {
  for (int i = 0; i < size; i++) {
    *(array + i) = value;
  }
}
-------------------------------------------------------------------
//15

#include <stdio.h>

void printArray(int *array, int size);

void main()
{
  int array[5];

  for (int i = 0; i < 5; i++)
  {
    scanf("%d", array + i);
  }

  printArray(array, 5);
}

void printArray(int *array, int size)
{
  for (int i = 0; i < size; i++)
  {
    printf("%d\n", (*(array + i)));
  }
}

--------------------------------------------------------------------
//16

#include <stdio.h>

void main() {
  int a, *b, **c, ***d;

  scanf("%d", &a);

  b = &a;
  c = &b;
  d = &c;

  printf("x2 = %d\nx3 = %d\nx4 = %d\n", *b * 2, **c * 3, ***d * 4);
}

------------------------------------------------------------------
//17

#include <stdio.h>

void frac(float num, int *inteiro, float *frac);

void main() {
  float num, frac_part;
  int int_part;

  printf("Digite um número real: ");
  scanf("%f", &num);

  frac(num, &int_part, &frac_part);

  printf("Parte inteira: %d\n", int_part);
  printf("Parte fracionária: %f\n", frac_part);
}

void frac(float num, int *inteiro, float *frac) {
  *inteiro = (int) num;
  *frac = num - *inteiro;
}

-------------------------------------------------------------------
//18

#include <stdio.h>

void calc_esfera(float R, float *area, float *volume);

void main() {
  float R, area, volume;

  printf("Digite o raio da esfera: ");
  scanf("%f", &R);

  calc_esfera(R, &area, &volume);

  printf("Área da superfície: %f\n", area);
  printf("Volume: %f\n", volume);
}

void calc_esfera(float R, float *area, float *volume) {
  *area = 4 * 3.141592 * R * R;
  *volume = 4.0 / 3.0 * 3.141592 * R * R * R;
}

--------------------------------------------------------------------
//19

#include <stdio.h>

void obterMaior(int *array, int size, int *maior, int *ocorrencias);

void main() {
  int array[10];
  int maior, ocorrencias;

  for (int i = 0; i < 10; i++) {
    scanf("%d", array + i);
  }

  obterMaior(array, 10, &maior, &ocorrencias);

  printf("Maior: %d\nOcorrencias: %d\n", maior, ocorrencias);
}

void obterMaior(int *array, int size, int *maior, int *ocorrencias) {
  *maior = *array;
  *ocorrencias = 1;

  for (int i = 1; i < size; i++) {
    if (*(array + i) > *maior) {
      *maior = *(array + i);
      *ocorrencias = 1;
    } else if (*(array + i) == *maior) {
      *ocorrencias += 1;
    }
  }
}

------------------------------------------------------------------
//20

#include <stdio.h>

int negativos(float *vet, int N);

void main() {
  int N;
  float vet[100];

  printf("Digite o tamanho do array: ");
  scanf("%d", &N);

  for (int i = 0; i < N; i++) {
    printf("Digite o %dº número: ", i + 1);
    scanf("%f", vet + i);
  }

  printf("Quantidade de números negativos: %d\n", negativos(vet, N));
}

int negativos(float *vet, int N) {
  int count = 0;

  for (int i = 0; i < N; i++) {
    if (*(vet + i) < 0) {
      count++;
    }
  }

  return count;
}

-------------------------------------------------------------------
//21

#include <stdio.h>

void main()
{
  int array[5];
  int *p = array;

  for (int i = 0; i < 5; i++)
  {
    scanf("%d", p + i);
  }

  for (int i = 0; i < 5; i++)
  {
    printf("%d\n", *(p + i));
  }
}

--------------------------------------------------------------------
//22

#include <stdio.h>

int sumArrays(int *a, int *b, int *c, int sizeA, int sizeB) {
  for (int i = 0; i < sizeA; i++) {
    if (i >= sizeB || i >= sizeA) {
      return 0;
    }
    
    *(c + i) = *(a + i) + *(b + i);
  }
}
------------------------------------------------------------------
//23

#include <stdio.h>

int obterMaior(int *array, int size);

void main() {
  int array[10];

  for (int i = 0; i < 10; i++) {
    scanf("%d", array + i);
  }

  printf("Maior: %d\n", obterMaior(array, 10));
}

int obterMaior(int *array, int size) {
  int maior = *array;

  for (int i = 1; i < size; i++) {
    if (*(array + i) > maior) {
      maior = *(array + i);
    }
  }

  return maior;
}
-------------------------------------------------------------------
//24

#include <stdio.h>

void obterMinMax(int *array, int size, int *min, int *max);

void main() {
  int array[10];
  int min, max;

  for (int i = 0; i < 10; i++) {
    scanf("%d", array + i);
  }

  obterMinMax(array, 10, &min, &max);

  printf("Min: %d\n", min);
  printf("Max: %d\n", max);
}

void obterMinMax(int *array, int size, int *min, int *max) {
  *min = *array;
  *max = *array;

  for (int i = 1; i < size; i++) {
    if (*(array + i) < *min) {
      *min = *(array + i);
    }

    if (*(array + i) > *max) {
      *max = *(array + i);
    }
  }
}

-------------------------------------------------------------------
//25 nn fiz

--------------------------------------------------------------------
//26

#include <stdio.h>
#include <math.h>

int raizes(float A, float B, float C, float *X1, float *X2);

void main() {
  float A, B, C, X1, X2;
  int raizes_reais;

  printf("Digite os coeficientes A, B e C da equação Ax² + Bx + C = 0: ");
  scanf("%f %f %f", &A, &B, &C);

  raizes_reais = raizes(A, B, C, &X1, &X2);

  if (raizes_reais == 0) {
    printf("Não existem raízes reais.\n");
  } else if (raizes_reais == 1) {
    printf("Existe uma raiz real: %f\n", X1);
  } else {
    printf("Existem duas raízes reais: %f e %f\n", X1, X2);
  }
}

int raizes(float A, float B, float C, float *X1, float *X2) {
  float delta = B * B - 4 * A * C;

  if (delta < 0) {
    return 0;
  } else if (delta == 0) {
    *X1 = -B / (2 * A);
    return 1;
  } else {
    *X1 = (-B + sqrt(delta)) / (2 * A);
    *X2 = (-B - sqrt(delta)) / (2 * A);
    return 2;
  }
}
